#include <system.h>
#include <screen.h>
#include <boot.h>
#include <keyboard.h>

unsigned char kbdus[128] =
{
  0,  27, '1', '2', '3', '4', '5', '6', '7', '8',	/* 9 */
  '9', '0', '-', '=', '\b',	/* Backspace */
  '\t',			/* Tab */
  'q', 'w', 'e', 'r',	/* 19 */
  't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\n',		/* Enter key */
  0,			/* 29   - Control */
  'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';',	/* 39 */
  '\'', '`',   0,		/* Left shift */
  '\\', 'z', 'x', 'c', 'v', 'b', 'n',			/* 49 */
  'm', ',', '.', '/',   0,					/* Right shift */
  '*',
  0,	/* Alt */
  ' ',	/* Space bar */
  0,	/* Caps lock */
  0,	/* 59 - F1 key ... > */
  0,   0,   0,   0,   0,   0,   0,   0,
  0,	/* < ... F10 */
  0,	/* 69 - Num lock*/
  0,	/* Scroll Lock */
  0,	/* Home key */
  0,	/* Up Arrow */
  0,	/* Page Up */
  '-',
  0,	/* Left Arrow */
  0,
  0,	/* Right Arrow */
  '+',
  0,	/* 79 - End key*/
  0,	/* Down Arrow */
  0,	/* Page Down */
  0,	/* Insert Key */
  0,	/* Delete Key */
  0,   0,   0,
  0,	/* F11 Key */
  0,	/* F12 Key */
  0,	/* All other keys are undefined */
};

struct keyhandler keyboardhandler;

volatile int keycount = 0;
volatile int printthekey = KEY_PRINT;
volatile char lastkey = -1;

void keyboard_lights(char status){
//  char tmp;
  while((inportb(0x64)&2)!=0){  } //loop until zero
  outportb(0x60,0xED);
  
  while((inportb(0x64)&2)!=0){  } //loop until zero
  outportb(0x60,status);
}


/* Handles the keyboard interrupt */
void keyboard_handler(struct regs *r)
{
  unsigned char scancode;
  
  /* Read from the keyboard's data buffer */
  scancode = inportb(0x60);
  
  /* If the top bit of the byte we read from the keyboard is
  *  set, that means that a key has just been released */
  if (scancode & 0x80)
  {
    /* You can use this one to see if the user released the
    *  shift, alt, or control keys... */
  }
  else
  {    
    if(kbdus[scancode] != '\b')
      keycount++;
    else
      keycount--;
    lastkey = kbdus[scancode];
    /* Here, a key was just pressed. Please note that if you
    *  hold a key down, you will get repeated key press
    *  interrupts. */
    
    /* Just to show you how this works, we simply translate
    *  the keyboard scancode into an ASCII value, and then
    *  display it to the screen. You can get creative and
    *  use some flags to see if a shift is pressed and use a
    *  different layout, or you can add another 128 entries
    *  to the above layout to correspond to 'shift' being
    *  held. If shift is held using the larger lookup table,
    *  you would add 128 to the scancode when you look for it */
    if(keyboardhandler.handler){
      if(keyboardhandler.handler(kbdus[scancode], scancode) == KEY_PRINT){
//	putch(kbdus[scancode]);
      }
    }
    else{
      if(printthekey == KEY_PRINT);
//        putch(kbdus[scancode]);
    }
  }
}

/* Installs the keyboard handler into IRQ1 */
void keyboard_install()
{
  irq_install_handler(1, keyboard_handler);
  keyboardhandler.handler = 0;
}

void setkeyboardhandler(int (*handler)(char k, int sc)){
  keyboardhandler.handler = handler;
}

char readkey(int print){
  int count = keycount;
  int prev = printthekey;
  printthekey = KEY_NOPRINT;
  
  while(count == keycount){
    __asm__("hlt");
  }
  printthekey = prev;
  if(keycount > count && print == KEY_PRINT)
    putch(lastkey);    // Key was not a backspace. (Precaution against deleting previous text)
  return lastkey;
}

int readline(int print, char* buffer){
  char *ptr = buffer;
  char key;
  int count = keycount;
  int startcount = keycount;
  
  int i = 0;
  buffer[0] = '\0';
  while(TRUE){
    key = readkey(KEY_NOPRINT);
    if(key == '\n'){
      putch("\n");
      break;
    }else if(key == '\b' && i > 0){
      i--;
      if(print == KEY_PRINT)
	putch('\b');
    }else if(key != '\b'){
      buffer[i] = key;
      i++;
      if(print == KEY_PRINT)
	putch(key);
    }
  }
  buffer[i] = '\0';
  return i;
}
